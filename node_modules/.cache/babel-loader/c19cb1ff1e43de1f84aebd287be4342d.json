{"ast":null,"code":"var _jsxFileName = \"/home/natc02/Desktop/DevelopmentWork/projectsBeforeUseInApplication/reactpaymentsolution/src/Payments.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { fetchFromAPI } from \"./helpers\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Payments() {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [amount, setAmount] = useState(0);\n  const [paymentIntent, setPaymentIntent] = useState(); // Create a payment intent on the server\n\n  const createPaymentIntent = async event => {\n    // Clamp amount to Stripe min/max\n    const validAmount = Math.min(Math.max(amount, 50), 9999999);\n    setAmount(validAmount); // Make the API Request\n\n    const pi = await fetchFromAPI(\"payments\", {\n      body: {\n        amount: validAmount\n      }\n    });\n    setPaymentIntent(pi);\n  }; // Handle the submission of card details\n\n\n  const handleSubmit = async event => {\n    event.preventDefault(); //prevents opening new page for submit form\n\n    const cardElement = elements.getElement(CardElement); // Confirm Card Payment\n\n    const {\n      paymentIntent: updatedPaymentIntent,\n      error\n    } = await stripe.confirmCardPayment(paymentIntent.client_secret, {\n      payment_method: {\n        card: cardElement\n      } //apply to payment intent, tries to charges immediately\n\n    });\n\n    if (error) {\n      console.error(error);\n      error.payment_intent && setPaymentIntent(error.payment_intent);\n    } else {\n      setPaymentIntent(updatedPaymentIntent);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Payments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"One-time payment scenario.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"well\",\n      children: /*#__PURE__*/_jsxDEV(PaymentIntentData, {\n        data: paymentIntent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"well\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Step 1: Create a Payment Intent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Change the amount of the payment in the form, then request a Payment Intent to create context for one-time payment. Min 50, Max 9999999\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-inline\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"number\",\n          value: amount,\n          disabled: paymentIntent,\n          onChange: e => setAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          disabled: amount <= 0,\n          onClick: createPaymentIntent,\n          hidden: paymentIntent,\n          children: [\"Ready to Pay $\", (amount / 100).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"well\",\n      hidden: !paymentIntent || paymentIntent.status === \"succeeded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Step 2: Submit a Payment Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Collect credit card details, then submit the payment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal Card: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"4242424242424242\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"3D Secure Card: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"4000002500003155\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        type: \"submit\",\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Payments, \"zvi6QqkbKmStG1rC7CrHtgTF5yc=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Payments;\nexport default pa;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payments\");","map":{"version":3,"sources":["/home/natc02/Desktop/DevelopmentWork/projectsBeforeUseInApplication/reactpaymentsolution/src/Payments.js"],"names":["React","useState","fetchFromAPI","CardElement","useStripe","useElements","Payments","stripe","elements","amount","setAmount","paymentIntent","setPaymentIntent","createPaymentIntent","event","validAmount","Math","min","max","pi","body","handleSubmit","preventDefault","cardElement","getElement","updatedPaymentIntent","error","confirmCardPayment","client_secret","payment_method","card","console","payment_intent","e","target","value","toFixed","status","pa"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { fetchFromAPI } from \"./helpers\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nfunction Payments() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [amount, setAmount] = useState(0);\n  const [paymentIntent, setPaymentIntent] = useState();\n\n  // Create a payment intent on the server\n  const createPaymentIntent = async (event) => {\n    // Clamp amount to Stripe min/max\n    const validAmount = Math.min(Math.max(amount, 50), 9999999);\n    setAmount(validAmount);\n\n    // Make the API Request\n    const pi = await fetchFromAPI(\"payments\", {\n      body: { amount: validAmount },\n    });\n    setPaymentIntent(pi);\n  };\n\n  // Handle the submission of card details\n  const handleSubmit = async (event) => {\n    event.preventDefault(); //prevents opening new page for submit form\n\n    const cardElement = elements.getElement(CardElement);\n\n    // Confirm Card Payment\n    const { paymentIntent: updatedPaymentIntent, error } =\n      await stripe.confirmCardPayment(paymentIntent.client_secret, {\n        payment_method: { card: cardElement }, //apply to payment intent, tries to charges immediately\n      });\n\n    if (error) {\n      console.error(error);\n      error.payment_intent && setPaymentIntent(error.payment_intent);\n    } else {\n      setPaymentIntent(updatedPaymentIntent);\n    }\n  };\n\n  return (\n    <>\n      <h2>Payments</h2>\n      <p>One-time payment scenario.</p>\n      <div className=\"well\">\n        <PaymentIntentData data={paymentIntent} />\n      </div>\n\n      <div className=\"well\">\n        <h3>Step 1: Create a Payment Intent</h3>\n        <p>\n          Change the amount of the payment in the form, then request a Payment\n          Intent to create context for one-time payment. Min 50, Max 9999999\n        </p>\n\n        <div className=\"form-inline\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            value={amount}\n            disabled={paymentIntent}\n            onChange={(e) => setAmount(e.target.value)}\n          />\n          <button\n            className=\"btn btn-success\"\n            disabled={amount <= 0}\n            onClick={createPaymentIntent}\n            hidden={paymentIntent}\n          >\n            Ready to Pay ${(amount / 100).toFixed(2)}\n          </button>\n        </div>\n      </div>\n      <hr />\n\n      <form\n        onSubmit={handleSubmit}\n        className=\"well\"\n        hidden={!paymentIntent || paymentIntent.status === \"succeeded\"}\n      >\n        <h3>Step 2: Submit a Payment Method</h3>\n        <p>Collect credit card details, then submit the payment.</p>\n        <p>\n          Normal Card: <code>4242424242424242</code>\n        </p>\n        <p>\n          3D Secure Card: <code>4000002500003155</code>\n        </p>\n\n        <hr />\n\n        <CardElement />\n        <button className=\"btn btn-success\" type=\"submit\">\n          Pay\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default pa\n"]},"metadata":{},"sourceType":"module"}